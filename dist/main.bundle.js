/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define, exports, module, process, require */\n\nvar SCENE_ORIGIN = window.location.origin || (window.location.protocol + '//' + window.location.host);\nvar ORIGIN = '';\ntry {\n  ORIGIN = new URL(document.currentScript.src).origin;\n} catch (e) {\n  ORIGIN = SCENE_ORIGIN;\n}\nvar WEBVR_AGENT_ORIGIN = window.location.protocol + '//' + window.location.hostname + ':4040';\nvar WEBVR_AGENT_ORIGIN_PROD = 'https://agent.webvr.rocks';\nvar IS_PROD = process.env.NODE_ENV === 'production';\n\n/* Adapted from source: https://github.com/jonathantneal/document-promises/blob/master/document-promises.es6 */\nvar doc = {};\ndoc.loaded = new Promise(function (resolve) {\n  var listener = function () {\n    if (document.readyState === 'complete') {\n      document.removeEventListener('readystatechange', listener);\n      resolve();\n    }\n  };\n  document.addEventListener('readystatechange', listener);\n  listener();\n});\ndoc.parsed = new Promise(function (resolve) {\n  var listener = function () {\n    if (document.readyState === 'interactive' || document.readyState === 'complete') {\n      document.removeEventListener('readystatechange', listener);\n      resolve();\n    }\n  };\n  document.addEventListener('readystatechange', listener);\n  listener();\n});\ndoc.contentLoaded = new Promise(function (resolve) {\n  var listener = function () {\n    if (document.readyState === 'interactive' || document.readyState === 'complete') {\n      document.removeEventListener('DOMContentLoaded', listener);\n      resolve();\n    }\n  };\n  document.addEventListener('DOMContentLoaded', listener);\n  listener();\n});\ndoc.tryUntilFound = function (functionToCall) {\n  return doc.parsed.then(function () {\n    var done = functionToCall();\n    if (!done) {\n      return doc.contentLoaded.then(functionToCall);\n    }\n  }).then(function (done) {\n    if (!done) {\n      return doc.loaded.then(functionToCall);\n    }\n  });\n};\n\nfunction xhrJSON (opts) {\n  if (typeof opts === 'string') {\n    opts = {url: opts};\n  }\n  opts = opts || {};\n  opts.method = opts.method || 'get';\n  if (typeof opts.data === 'object') {\n    opts.data = JSON.stringify(opts.data);\n  }\n  return new Promise(function (resolve, reject) {\n    var xhr = new XMLHttpRequest();\n    xhr.open(opts.method, opts.url, 'true');\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    xhr.addEventListener('load', function () {\n      var data = {};\n      try {\n        // NOTE: Not parsing as JSON using `XMLHttpRequest#responseType` because of incomplete browser support.\n        data = JSON.parse(xhr.responseText || '{}');\n      } catch (e) {\n      }\n      resolve(data);\n    });\n    xhr.addEventListener('error', reject);\n    xhr.send(opts.data);\n  });\n}\n\nfunction setCSSHotspotEl (hotspotEl, opts) {\n  hotspotEl.style.cssText = `height: 61px; width: ${opts.width}; position: absolute; bottom: 0; left: ${opts.left}; right: ${opts.right}; z-index: 999999; cursor: pointer;`;\n}\n\n\n// Adapted from source: https://gist.github.com/mudge/5830382\nfunction EventEmitter () {\n  this.events = {};\n}\nEventEmitter.prototype.on = function (event, listener) {\n  if (typeof this.events[event] !== 'object') {\n    this.events[event] = [];\n  }\n\n  this.events[event].push(listener);\n};\nEventEmitter.prototype.removeListener = function (event, listener) {\n  var idx;\n\n  if (typeof this.events[event] === 'object') {\n    idx = this.events[event].indexOf(listener);\n\n    if (idx > -1) {\n      this.events[event].splice(idx, 1);\n    }\n  }\n};\nEventEmitter.prototype.emit = function (event) {\n  var i;\n  var listeners;\n  var length;\n  var args = Array.prototype.slice.call(arguments, 1);\n\n  if (typeof this.events[event] === 'object') {\n    listeners = this.events[event].slice();\n    length = listeners.length;\n\n    for (i = 0; i < length; i++) {\n      listeners[i].apply(this, args);\n    }\n  }\n};\nEventEmitter.prototype.once = function (event, listener) {\n  this.on(event, function g () {\n    this.removeListener(event, g);\n    listener.apply(this, arguments);\n  });\n};\n\nfunction WebvrAgent (opts) {\n  var self = this;\n  this._inited = false;\n  this._injected = false;\n  this._displayListenersSet = false;\n  this.opts = opts || {};\n  this.timeout = 'timeout' in this.opts ? this.opts.timeout : 0;\n  this.originHost = this.opts.originHost = (this.opts.originHost || ORIGIN || WEBVR_AGENT_ORIGIN || WEBVR_AGENT_ORIGIN_PROD).replace(/\\/+$/g, '');\n  this.uriHost = this.opts.uriHost = this.opts.uriHost || (this.originHost + '/index.html');\n  this.debug = this.opts.debug = 'debug' in this.opts ? !!this.opts.debug : !IS_PROD;\n  this.iframeTimeout = 'optsTimeout' in this.opts ? this.opts.iframeTimeout : 30000;  // Timeout for loading `<iframe>` (time in milliseconds [default: 30 seconds]).\n\n  // TODO: Keep track of multiple displays for the following:\n  // - `connectedDisplay`,\n  // - `disconnectedDisplay`,\n  // - `presentingDisplays`, and\n  // - `notPresentingDisplay`.\n  this.connectedDisplay = null;\n  this.disconnectedDisplay = null;\n  this.presentingDisplay = null;\n  this.notPresentingDisplay = null;\n\n  this.headsets = {\n    htc_vive: {\n      name: 'HTC Vive',\n      slug: 'htc_vive'\n    },\n    oculus_rift: {\n      name: 'Oculus Rift',\n      slug: 'oculus_rift'\n    },\n    google_daydream: {\n      name: 'Google Daydream',\n      slug: 'google_daydream'\n    },\n    samsung_gear_vr: {\n      name: 'Samsung Gear VR',\n      slug: 'samsung_gear_vr'\n    },\n    google_cardboard: {\n      name: 'Google Cardboard',\n      slug: 'google_cardboard'\n    },\n    osvr_hdk2: {\n      name: 'OSVR HDK2',\n      slug: 'osvr_hdk2'\n    }\n  };\n\n  this.gamepads = __webpack_require__(4);\n\n  console.log('gamepads', this.gamepads);\n\n  this.keys = {\n    esc: 27,\n    i: 73,\n    c: 67,\n    f: 70,\n    v: 86\n  };\n\n  this.iframeLoaded = new Promise(function (resolve, reject) {\n    var listener = function (evt) {\n      if (evt.source === window) {\n        return;\n      }\n      var data = evt.data;\n      if (data.src !== 'webvr-agent') {\n        return;\n      }\n      if (data.action === 'loaded') {\n        console.log('[webvr-agent][client] Successfully finished loading iframe: %s', evt.data.url);\n        self.hasLoadedIframe = true;\n        self.postMessage({action: 'loaded'});\n        window.removeEventListener('message', listener);\n        resolve(self.iframe);\n      }\n    };\n    window.addEventListener('message', listener);\n    setTimeout(function () {\n      window.removeEventListener('message', listener);\n      reject(new Error('Message-proxy iframe could not be load'));\n    }, self.iframeTimeout);\n  });\n\n  EventEmitter.call(this);\n}\nObject.create(WebvrAgent, EventEmitter);\nWebvrAgent.prototype.init = function () {\n  if (this._inited) {\n    this._inited = true;\n    return this.inject();\n  }\n};\nWebvrAgent.prototype.url = function (key, params) {\n  // TODO: Construct query-string from the `params` object.\n  var url = this.originHost + '/' + (key || '').replace(/^\\/*/g, '');\n  params = params || {};\n  if (key === 'manifest') {\n    if (params.url) {\n      return url + '/manifest?url=' + params.url;\n    }\n  }\n  return url;\n};\nWebvrAgent.prototype.attemptRequestPresentUponNavigation = function () {\n  if (navigator.doNotTrack === '1' || navigator.doNotTrack === 1) {\n    return Promise.resolve(false);\n  }\n\n  var self = this;\n  return new Promise(function (resolve) {\n    // Polyfill behaviour of `navigator.vr`'s `navigate` event.\n    xhrJSON({\n      method: 'get',\n      url: self.url('sessions')\n    }).then(function (displayId) {\n      if (displayId) {\n        return self.getConnectedDisplay(displayId).then(function (display) {\n          console.log('[webvr-agent][client] Automatically presenting to VR display \"%s\" (id: %s)',\n            self.getDisplayName(display), self.getDisplayId(display));\n          resolve(self.requestPresent(display));\n        });\n      } else {\n        return resolve(null);\n      }\n    }).catch(function (err) {\n      if (err) {\n        console.warn(err);\n      }\n      return resolve(null);\n    });\n  });\n};\nWebvrAgent.prototype.ready = function () {\n  return Promise.all([\n    // this.getConnectedDisplay(),  // NOTE: Workaround for Firefox Nightly to engage VR mode.\n    this.attemptRequestPresentUponNavigation(),\n    this.addUIAndEventListeners(),\n    this.inject()\n  ]);\n};\nWebvrAgent.prototype.postMessage = function (msg) {\n  var self = this;\n  if (typeof msg !== 'object') {\n    throw new Error('`msg` must be an object for calls to `WebvrAgent#postMessage`');\n  }\n  return self.iframeLoaded.then(function () {\n    if (!self.iframe) {\n      return Promise.reject(new Error('Message-proxy iframe not found'));\n    }\n    Object.assign(msg, {src: 'webvr-agent'});\n    self.iframe.contentWindow.postMessage(msg, self.originHost);\n    return Promise.resolve(true);\n  });\n};\nWebvrAgent.prototype.addUIAndEventListeners = function () {\n  var self = this;\n  var toggleVRButtonDimensions = {};\n  var hotspotEl = document.querySelector('#webvr-agent-hotspot');\n  if (!hotspotEl) {\n    hotspotEl = document.createElement('div');\n    hotspotEl.setAttribute('id', 'webvr-agent-hotspot');\n    setCSSHotspotEl(hotspotEl, {width: 0, left: 0, right: 0});\n    document.body.appendChild(hotspotEl);\n  }\n\n  window.addEventListener('message', function (evt) {\n    var data = evt.data;\n    var action = data.action;\n    var src = data.src;\n    if (src !== 'webvr-agent') {\n      return;\n    }\n    if (action === 'resize-iframe') {\n      webvrAgent.iframe.style.height = data.height;\n      console.log('[webvr-agent][client] Resized iframe to %s', data.height);\n    } else if (action === 'display-request-present') {\n      webvrAgent.requestPresent(data.displayId);\n    } else if (action === 'display-exit-present') {\n      webvrAgent.exitPresent(data.displayId);\n    } else if (action === 'resize-toggle-vr-button') {\n      toggleVRButtonDimensions = data.dimensions || {};\n      setCSSHotspotEl(hotspotEl, toggleVRButtonDimensions);\n    }\n  });\n\n  window.addEventListener('mouseover', function (evt) {\n    // Send a message to the `host`, which synthesises a `:hover`-like event.\n    if (evt.target === document.querySelector('#webvr-agent-hotspot') ||\n        (evt.target.closest && evt.target.closest('#webvr-agent-hotspot'))) {\n      self.postMessage({action: 'mouseenter-toggle-vr-button'});\n      return;\n    }\n  });\n\n  window.addEventListener('mouseout', function (evt) {\n    // Send a message to the `host`, which removes the `:hover`-like event.\n    if (evt.target === document.querySelector('#webvr-agent-hotspot') ||\n        (evt.target.closest && evt.target.closest('#webvr-agent-hotspot'))) {\n      self.postMessage({action: 'mouseleave-toggle-vr-button'});\n      return;\n    }\n  });\n\n  window.addEventListener('click', function (evt) {\n    // Workaround for user-gesture requirement to enter VR.\n    if (evt.target === document.querySelector('#webvr-agent-hotspot') ||\n        (evt.target.closest && evt.target.closest('#webvr-agent-hotspot'))) {\n      webvrAgent.requestPresent();\n      return;\n    }\n\n    if (self.isDisplayPresenting(self.connectedDisplay)) {\n      return;\n    }\n    self.postMessage({action: 'close-info'});\n  });\n\n  window.addEventListener('keyup', function (evt) {\n    if (evt.target !== document.body || (evt.shiftKey || evt.metaKey || evt.altKey || evt.ctrlKey)) {\n      return;\n    }\n    if (evt.keyCode === self.keys.esc) {\n      console.log('[webvr-agent][client] `Esc` key pressed');\n      if (self.isDisplayPresenting(self.connectedDisplay)) {\n        self.postMessage({action: 'display-exit-present'});\n      } else {\n        self.postMessage({action: 'close-info'});\n      }\n    } else if (evt.keyCode === self.keys.i) {\n      evt.preventDefault();\n      console.log('[webvr-agent][client] `i` key pressed');\n      if (!self.isDisplayPresenting(self.connectedDisplay)) {\n        self.postMessage({action: 'toggle-info'});\n      }\n    } else if (evt.keyCode === self.keys.c) {\n      evt.preventDefault();\n      console.log('[webvr-agent][client] `c` key pressed');\n      if (self.isDisplayPresenting(self.connectedDisplay)) {\n        self.postMessage({action: 'display-exit-present'});\n      } else {\n        self.postMessage({action: 'close-info'});\n      }\n    } else if (evt.keyCode === self.keys.v) {\n      evt.preventDefault();\n      console.log('[webvr-agent][client] `v` key pressed');\n      if (self.isDisplayPresenting(self.connectedDisplay)) {\n        self.exitPresent();\n      } else {\n        self.requestPresent();\n      }\n    } else if (evt.keyCode === self.keys.f) {\n      evt.preventDefault();\n      console.log('[webvr-agent][client] `f` key pressed');\n      if (self.isDisplayPresenting(self.connectedDisplay)) {\n        self.exitPresent();\n      } else {\n        self.requestPresent();\n      }\n    }\n  });\n\n  // TODO: Handle three.js scenes with `THREE.VREffect`.\n  var setupFunctions = [\n    aframeSceneSetup\n  ];\n\n  setupFunctions.forEach(doc.tryUntilFound);\n\n  function aframeSceneSetup () {\n    var aframeScene = document.querySelector('a-scene');\n    if (!aframeScene) {\n      return;\n    }\n    if (aframeScene.hasLoaded) {\n      aframeHideVRModeUI();\n    } else {\n      aframeScene.addEventListener('loaded', aframeHideVRModeUI);\n    }\n    function aframeHideVRModeUI () {\n      aframeScene.setAttribute('vr-mode-ui', 'enabled: false');\n    }\n    return aframeScene;\n  }\n};\nWebvrAgent.prototype.inject = function () {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    if (self._injected) {\n      resolve(false);\n      return;\n    }\n    self._injected = true;\n    console.log('[webvr-agent][client] Injecting `<iframe>` for \"%s\"', self.uriHost);\n    var iframe = self.iframe = document.createElement('iframe');\n    iframe.src = self.uriHost + '?url=' + window.location.href;\n    iframe.style.cssText = 'border-width: 0; height: 61px; width: 100%; position: absolute; bottom: 0; right: 0; left: 0; z-index: 99999';\n    iframe.addEventListener('load', function () {\n      // if (self._injected) {\n      //   reject(new Error('Already loaded iframe'));\n      //   return;\n      // }\n      resolve(true);\n      console.log('[webvr-agent][client] Injected `<iframe>` for \"%s\"', self.uriHost);\n    });\n    iframe.addEventListener('error', function (err) {\n      reject(err);\n      console.warn('[webvr-agent][client] Could not load:', err);\n    });\n    doc.tryUntilFound(function () {\n      if (!document.body) {\n        return;\n      }\n      document.body.appendChild(iframe);\n    });\n  });\n};\nWebvrAgent.prototype.requestPresent = function (display, canvas) {\n  var self = this;\n  return doc.loaded.then(function () {\n    return self.getConnectedDisplay(display ? display.id : null, display).then(function (display) {\n      if (!display) {\n        throw new Error('No VR headset detected');\n      }\n\n      // TODO: Handle three.js scenes with `THREE.VREffect`.\n      var aframeScene = canvas && canvas.matches && canvas.matches('a-scene') ? canvas : document.querySelector('a-scene');\n      canvas = canvas || document.querySelector('canvas');\n\n      if (!canvas) {\n        throw new Error('Canvas source empty');\n      }\n\n      if (self.isDisplayPresenting(display)) {\n        throw new Error('VR headset is presenting');\n      }\n\n      if (aframeScene) {\n        if (aframeScene.hasLoaded) {\n          return aframeScene.enterVR().then(function (x) {\n            return display;\n          });\n        } else {\n          aframeScene.addEventListener('loaded', function () {\n            return aframeScene.enterVR().then(function () {\n              return display;\n            });\n          });\n        }\n      }\n\n      return display.requestPresent([{source: canvas}]).then(function () {\n        return display;\n      });\n    }).then(function (display) {\n      var isConnected = self.isDisplayConnected(display);\n      var isDisconnected = !isConnected;\n      var isPresenting = self.isDisplayPresenting(display);\n      return self.postMessage({\n        action: 'display-present-start',\n        displayId: self.getDisplayId(display),\n        displayName: self.getDisplayName(display),\n        displaySlug: self.getDisplaySlug(display),\n        isConnected: isConnected,\n        isDisconnected: isDisconnected,\n        isPresenting: isPresenting\n      });\n    }).catch(function (err) {\n      console.error('[webvr-agent][client] Failed to enter VR presentation' +\n        (err && err.message ? ': ' + err.message : ''),\n        err.stack);\n    });\n  });\n};\nWebvrAgent.prototype.exitPresent = function (display, canvas) {\n  var self = this;\n  return doc.loaded.then(function () {\n    return self.getConnectedDisplay(display ? display.id : null, display).then(function (display) {\n      if (!display) {\n        throw new Error('No VR headset detected');\n      }\n\n      if (!self.isDisplayPresenting(display)) {\n        throw new Error('VR headset is not presenting');\n      }\n\n      // TODO: Handle three.js scenes with `THREE.VREffect`.\n      var aframeScene = canvas && canvas.matches && canvas.matches('a-scene') ? canvas : document.querySelector('a-scene');\n      canvas = canvas || document.querySelector('canvas');\n\n      // TODO: For non-A-Frame scenes, find the VR display being presented which contains a layer for `canvas`.\n\n      if (aframeScene) {\n        if (aframeScene.hasLoaded) {\n          return aframeScene.exitVR().then(function (x) {\n            return display;\n          });\n        } else {\n          aframeScene.addEventListener('loaded', function () {\n            return aframeScene.exitVR().then(function () {\n              return display;\n            });\n          });\n        }\n      }\n\n      return display.exitPresent().then(function () {\n        return display;\n      }, function (err) {\n        return new Error('Failed to exit VR presentation' +\n          (err && err.message ? ': ' + err.message : ''));\n      });\n    }).then(function (display) {\n      var isConnected = self.isDisplayConnected(display);\n      var isDisconnected = !isConnected;\n      var isPresenting = false;\n      return self.postMessage({\n        action: 'display-present-end',\n        displayId: self.getDisplayId(display),\n        displayName: self.getDisplayName(display),\n        displaySlug: self.getDisplaySlug(display),\n        isConnected: isConnected,\n        isDisconnected: isDisconnected,\n        isPresenting: isPresenting\n      });\n    }).catch(function (err) {\n      console.error('[webvr-agent][client] Failed to exit VR presentation' +\n        (err && err.message ? ': ' + err.message : ''));\n      throw err;\n    });\n  });\n};\nWebvrAgent.prototype.isDisplayConnected = function (display) {\n  if (!display) {\n    return false;\n  }\n  if ('isConnected' in display) {\n    return display.isConnected;\n  }\n  if ('connected' in display) {\n    return display.connected;\n  }\n  return false;\n};\nWebvrAgent.prototype.isDisplayPresenting = function (display) {\n  if (display) {\n    if ('isPresenting' in display) {\n      return display.isPresenting;\n    }\n    if ('presenting' in display) {\n      return display.presenting;\n    }\n  }\n  return false;\n};\nWebvrAgent.prototype.getDisplayId = function (display) {\n  if (display) {\n    if ('displayId' in display) {\n      return String(display.displayId);\n    }\n    if ('id' in display) {\n      return String(display.id);\n    }\n  }\n  return null;\n};\nWebvrAgent.prototype.getDisplayName = function (display) {\n  if (display) {\n    if ('displayName' in display) {\n      return display.displayName;\n    }\n    if ('name' in display) {\n      return display.name;\n    }\n  }\n  return null;\n};\nWebvrAgent.prototype.getDisplaySlug = function (display) {\n  if (display) {\n    var displayName = (this.getDisplayName(display) || '').toLowerCase();\n    if (displayName.indexOf('oculus') > -1) {\n      return this.headsets.oculus_rift.slug;\n    } else if (displayName.indexOf('openvr') > -1 || displayName.indexOf('vive') > -1) {\n      return this.headsets.htc_vive.slug;\n    } else if (displayName.indexOf('gear') > -1) {\n      return this.headsets.samsung_gear_vr.slug;\n    } else if (displayName.indexOf('daydream') > -1) {\n      return this.headsets.google_daydream.slug;\n    } else if (displayName.indexOf('osvr') > -1) {\n      return this.headsets.osvr_hdk2.slug;\n    }\n  }\n  return this.headsets.google_cardboard.slug;\n};\nWebvrAgent.prototype.areDisplaysSame = function (displayA, displayB) {\n  return this.getDisplayId(displayA) === this.getDisplayId(displayB) &&\n         this.getDisplayName(displayA) === this.getDisplayName(displayB);\n};\nWebvrAgent.prototype.setDisconnectedDisplay = function (display) {\n  var self = this;\n\n  if (self.areDisplaysSame(display, self.disconnectedDisplay)) {\n    return;\n  }\n\n  var displayName = self.getDisplayName(display);\n  var displayId = self.getDisplayId(display);\n  var displaySlug = self.getDisplaySlug(display);\n\n  self.iframeLoaded.then(function () {\n    console.log('[webvr-agent][client] Display disconnected: %s (ID: %s; slug: %s)',\n      displayName,\n      displayId,\n      displaySlug);\n\n    self.connectedDisplay = display;\n\n    // TODO: Keep track of multiple `disconnectedDisplay`s.\n    self.disconnectedDisplay = display;\n\n    return Promise.all([\n      self.postMessage({\n        action: 'display-disconnected',\n        displayId: displayId,\n        displayName: displayName,\n        displaySlug: displaySlug,\n        isConnected: false,\n        isDisconnected: true,\n        isPresenting: self.isDisplayPresenting(display)\n      })\n    ]);\n  });\n};\nWebvrAgent.prototype.setPresentingDisplay = function (display) {\n  var self = this;\n\n  if (self.areDisplaysSame(display, self.presentingDisplay)) {\n    return;\n  }\n\n  var displayName = self.getDisplayName(display);\n  var displayId = self.getDisplayId(display);\n  var displaySlug = self.getDisplaySlug(display);\n\n  self.iframeLoaded.then(function () {\n    console.log('[webvr-agent][client] Display presenting: %s (ID: %s; slug: %s)',\n      displayName,\n      displayId,\n      displaySlug);\n\n    self.connectedDisplay = display;\n\n    // TODO: Keep track of multiple `presentingDisplay`s.\n    self.presentingDisplay = display;\n\n    var isConnected = self.isDisplayConnected(display);\n    var isDisconnected = !isConnected;\n    var isPresenting = true;\n\n    return Promise.all([\n      self.postMessage({\n        action: 'display-presenting',\n        displayId: displayId,\n        displayName: displayName,\n        displaySlug: displaySlug,\n        isConnected: isConnected,\n        isDisconnected: isDisconnected,\n        isPresenting: isPresenting\n      }),\n      self.postMessage({\n        action: 'display-present-start',\n        displayId: displayId,\n        displayName: displayName,\n        displaySlug: displaySlug,\n        isConnected: isConnected,\n        isDisconnected: isDisconnected,\n        isPresenting: isPresenting\n      }),\n      self.persistVRDisplayPresentationState(display)\n    ]);\n  });\n};\nWebvrAgent.prototype.setNotPresentingDisplay = function (display) {\n  var self = this;\n\n  if (self.areDisplaysSame(display, self.notPresentingDisplay)) {\n    return;\n  }\n\n  var displayName = self.getDisplayName(display);\n  var displayId = self.getDisplayId(display);\n  var displaySlug = self.getDisplaySlug(display);\n\n  self.iframeLoaded.then(function () {\n    console.log('[webvr-agent][client] Display stopped presenting: %s (ID: %s; slug: %s)',\n      displayName,\n      displayId,\n      displaySlug);\n\n    // self.connectedDisplay = display;\n\n    self.presentingDisplay = null;\n\n    // TODO: Keep track of multiple `notPresentingDisplay`s.\n    self.notPresentingDisplay = display;\n\n    return Promise.all([\n      self.postMessage({\n        action: 'display-present-end',\n        displayId: displayId,\n        displayName: displayName,\n        displaySlug: displaySlug,\n        isConnected: self.isDisplayConnected(display),\n        isDisconnected: !self.isDisplayConnected(display),\n        isPresenting: false\n      }),\n      self.persistVRDisplayPresentationState(display)\n    ]);\n  });\n};\nWebvrAgent.prototype.setConnectedDisplay = function (display) {\n  var self = this;\n\n  if (self.areDisplaysSame(display, self.connectedDisplay)) {\n    return;\n  }\n\n  var displayName = self.getDisplayName(display);\n  var displayId = self.getDisplayId(display);\n  var displaySlug = self.getDisplaySlug(display);\n\n  self.iframeLoaded.then(function () {\n    console.log('[webvr-agent][client] Display connected: %s (ID: %s; slug: %s)',\n      displayName,\n      displayId,\n      displaySlug);\n\n    self.disconnectedDisplay = null;\n\n    // TODO: Keep track of multiple `connectedDisplay`s.\n    self.connectedDisplay = display;\n\n    return Promise.all([\n      self.postMessage({\n        action: 'display-connected',\n        displayId: displayId,\n        displayName: displayName,\n        displaySlug: displaySlug,\n        isConnected: true,\n        isDisconnected: false,\n        isPresenting: self.isDisplayPresenting(display)\n      })\n    ]);\n  });\n\n  return display;\n};\nWebvrAgent.prototype.persistVRDisplayPresentationState = function (display) {\n  if (navigator.doNotTrack === '1' || navigator.doNotTrack === 1) {\n    return Promise.resolve(false);\n  }\n\n  // Polyfill behaviour of `navigator.vr`'s `navigate` event.\n  display = display || this.connectedDisplay;\n\n  // Persist state of VR presentation (for `navigator.vr`'s `navigate` event).\n  return xhrJSON({\n    method: 'post',\n    url: this.url('sessions'),\n    data: {\n      docURL: window.location.href,\n      docTitle: document.title,\n      displayId: this.getDisplayId(display),\n      displayName: this.getDisplayName(display),\n      displaySlug: this.getDisplaySlug(display),\n      isConnected: this.isDisplayConnected(display),\n      isDisconnected: !this.isDisplayConnected(display),\n      isPresenting: this.isDisplayPresenting(display),\n    }\n  }).then(function (data) {\n    console.log('[webvr-agent][client] Persisted state of presenting VR display');\n  }).catch(function (err) {\n    if (err) {\n      console.warn(err);\n    }\n  });\n};\nWebvrAgent.prototype.getConnectedDisplay = function (preferredDisplayId, defaultDisplay) {\n  var self = this;\n\n  if (preferredDisplayId) {\n    preferredDisplayId = String(preferredDisplayId);\n  }\n\n  if (!self._displayListenersSet) {\n    if (navigator.vr) {\n      // For WebVR v1.2 API.\n      navigator.vr.addEventListener('displayconnect', handleVREventDisplayConnect);\n      navigator.vr.addEventListener('displaydisconnect', handleVREventDisplayDisconnect);\n      navigator.vr.addEventListener('navigate', handleVREventNavigate);\n\n      // TODO: For each `VRDisplay` instance, add these event listeners:\n      // - `activate`\n      // - `deactivate`\n      // - `blur`\n      // - `blurred`\n      // - `focus`\n      // - `focused`\n      // - `focussed`\n      // - `presentchange`\n\n      // TODO: Support WebVR v2.0 API.\n    } else if (navigator.getVRDisplays) {\n      // For WebVR v1.1 API.\n      window.addEventListener('vrdisplayconnected', handleVREventDisplayConnect);\n      window.addEventListener('vrdisplayconnect', handleVREventDisplayConnect);\n\n      window.addEventListener('vrdisplaydisconnected', handleVREventDisplayDisconnect);\n      window.addEventListener('vrdisplaydisconnect', handleVREventDisplayDisconnect);\n\n      window.addEventListener('vrdisplayactivate', handleVREventDisplayActivate);\n      window.addEventListener('vrdisplayactivated', handleVREventDisplayActivate);\n\n      window.addEventListener('vrdisplaydeactivate', handleVREventDisplayDeactivate);\n      window.addEventListener('vrdisplaydeactivated', handleVREventDisplayDeactivate);\n\n      window.addEventListener('vrdisplayblur', handleVREventDisplayBlur);\n      window.addEventListener('vrdisplayfocus', handleVREventDisplayFocus);\n\n      window.addEventListener('vrdisplaypresentchange', handleVREventDisplayPresentChange);\n    }\n  }\n\n  self._displayListenersSet = true;\n\n  function handleVREventDisplayConnect (evt) {\n    console.log('[webvr-agent][client] Event \"%s\" received:', evt.type, evt);\n    if (evt.display) {\n      self.setConnectedDisplay(evt.display);\n    }\n  }\n\n  function handleVREventDisplayDisconnect (evt) {\n    console.log('[webvr-agent][client] Event \"%s\" received:', evt.type, evt);\n    if (evt.display) {\n      self.setDisonnectedDisplay(evt.display);\n    }\n  }\n\n  function handleVREventNavigate (evt) {\n    console.log('[webvr-agent][client] Event \"%s\" received:', evt.type, evt);\n    if (evt.display) {\n      self.setConnectedDisplay(evt.display);\n    }\n  }\n\n  function handleVREventDisplayActivate (evt) {\n    console.log('[webvr-agent][client] Event \"%s\" received:', evt.type, evt);\n    if (evt.display) {\n      self.setConnectedDisplay(evt.display);\n    }\n    if (evt.reason === 'mount' || evt.reason === 'mounted' ||\n        evt.reason === 'requested' ||\n        evt.reason === 'navigation' ||\n        !evt.reason) {\n      if (self.mountedDisplay !== evt.connectedDisplay) {\n        self.mountedDisplay = evt.display;\n      }\n    }\n  }\n\n  function handleVREventDisplayDeactivate (evt) {\n    console.log('[webvr-agent][client] Event \"%s\" received:', evt.type, evt);\n    if (evt.display) {\n      self.setConnectedDisplay(null);\n    }\n    if (evt.reason === 'unmount' || evt.reason === 'unmounted' || !evt.reason) {\n      if (self.mountedDisplay === evt.connectedDisplay) {\n        self.mountedDisplay = null;\n      }\n    }\n  }\n\n  function handleVREventDisplayBlur (evt) {\n    console.log('[webvr-agent][client] Event \"%s\" received:', evt.type, evt);\n    if (evt.display) {\n      self.setConnectedDisplay(evt.display);\n    }\n  }\n\n  function handleVREventDisplayFocus (evt) {\n    console.log('[webvr-agent][client] Event \"%s\" received:', evt.type, evt);\n    if (evt.display) {\n      self.setConnectedDisplay(evt.display);\n    }\n  }\n\n  function handleVREventDisplayPresentChange (evt) {\n    console.log('[webvr-agent][client] Event \"%s\" received:', evt.type, evt);\n    if (!evt.display) {\n      return;\n    }\n    if (self.isDisplayPresenting(evt.display)) {\n      self.setPresentingDisplay(evt.display);\n    } else {\n      self.setNotPresentingDisplay(evt.display);\n    }\n  }\n\n  return new Promise(function (resolve, reject) {\n    var connectedDisplay = self.connectedDisplay;\n    if (connectedDisplay && self.isDisplayConnected(connectedDisplay)) {\n      resolve(connectedDisplay);\n      return;\n    }\n\n    if (navigator.vr) {\n      return navigator.vr.getDisplays().then(findConnectedDisplays).then(resolve);\n    } else if (navigator.getVRDisplays) {\n      return navigator.getVRDisplays().then(findConnectedDisplays).then(resolve);\n    } else {\n      resolve(defaultDisplay || null);\n      return;\n    }\n\n    function findConnectedDisplays (displays) {\n      displays = displays || [];\n      var displayId;\n      var connectedDisplay = preferredDisplayId ? displays.filter(function (display) {\n        displayId = self.getDisplayId(display);\n        if (displayId && displayId === preferredDisplayId) {\n          return self.isDisplayConnected(display);\n        }\n      })[0] : null;\n      connectedDisplay = connectedDisplay || displays.filter(function (display) {\n        return self.isDisplayConnected(display);\n      })[0] || defaultDisplay || null;\n      self.setConnectedDisplay(connectedDisplay);\n      return connectedDisplay;\n    }\n  });\n};\n\nvar webvrAgent = new WebvrAgent();\n\nwebvrAgent.ready().then(function (result) {\n  var presentingDisplay = result[0];\n  var proxy = result[1];\n\n  console.log('[webvr-agent][client] Agent ready');\n  if (presentingDisplay) {\n    console.log('[webvr-agent][client] Presenting to VR display \"%s\" (id: %s)',\n      webvrAgent.getDisplayName(presentingDisplay),\n      webvrAgent.getDisplayId(presentingDisplay));\n  }\n  if (proxy) {\n    console.log('[webvr-agent][client] Message-proxy (%s) ready', proxy.name);\n  }\n  console.log('[webvr-agent][client] Using iframe', webvrAgent.iframe);\n\n  if (!presentingDisplay) {\n    webvrAgent.getConnectedDisplay().then(function (connectedDisplay) {\n      console.log('[webvr-agent][client] Found connected VR display: %s (ID: %s; slug: %s)',\n        webvrAgent.getDisplayName(connectedDisplay),\n        webvrAgent.getDisplayId(connectedDisplay),\n        webvrAgent.getDisplaySlug(connectedDisplay));\n    });\n  }\n}).catch(function (err) {\n  console.error('[webvr-agent][client] Error' +\n    (err && err.message ? ': ' + err.message : ''));\n});\n\nif (true) {\n  !(__WEBPACK_AMD_DEFINE_FACTORY__ = (webvrAgent),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n} else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {\n  module.exports = webvrAgent;\n} else if (window) {\n  window.webvrAgent = webvrAgent;\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {/* global process, require, URL */\n\nvar SCENE_ORIGIN = window.location.origin || (window.location.protocol + '//' + window.location.host);\nvar ORIGIN = '';\ntry {\n  ORIGIN = new URL(window.location.href).origin;\n} catch (e) {\n  ORIGIN = SCENE_ORIGIN;\n}\n// var WEBVR_AGENT_ORIGIN = window.location.protocol + '//' + window.location.hostname + ':4040';\n// var WEBVR_AGENT_ORIGIN_PROD = 'https://agent.webvr.rocks';\nvar IS_PROD = process.env.NODE_ENV === 'production';\nvar SITE_URL = (window.location.search.match(/[?&]url=(.+)/) || [])[1];\nvar SITE_ORIGIN = '*';\ntry {\n  SITE_ORIGIN = new URL(SITE_URL).origin;\n} catch (e) {\n}\nvar BOUNDING_CLIENT_RECT_KEYS = ['bottom', 'height', 'left', 'right', 'top', 'width'];\n\nvar ariaListbox = __webpack_require__(3);\n// var feathers = require('feathers-client');\n// var Frdialogmodal = require('fr-dialogmodal');\n\nconst Frdialogmodal = function ({\n    selector: selector = '.js-fr-dialogmodal',\n    modalSelector: modalSelector = '.js-fr-dialogmodal-modal',\n    openSelector: openSelector = '.js-fr-dialogmodal-open',\n    closeSelector: closeSelector = '.js-fr-dialogmodal-close',\n    isAlert: isAlert = false,\n    readyClass: readyClass = 'fr-dialogmodal--is-ready',\n    activeClass: activeClass = 'fr-dialogmodal--is-active'\n  } = {}) {\n\n\n  // CONSTANTS\n  const doc = document;\n  const docEl = doc.documentElement;\n  const _q = (el, ctx = doc) => [].slice.call(ctx.querySelectorAll(el));\n\n\n  // SUPPORTS\n  if (!('querySelector' in doc) || !('addEventListener' in window) || !docEl.classList) return;\n\n\n  // SETUP\n  // set dialog modal element NodeLists\n  const containers = _q(selector);\n  const focusableSelectors = ['a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'iframe', 'object', 'embed', '[contenteditable]', '[tabindex]:not([tabindex^=\"-\"])'];\n  //  TEMP\n  let currButtonOpen = null;\n  let currModal = null;\n  //  elements within modal\n  let focusableElements = null;\n\n\n  //  UTILS\n  function _defer (fn) {\n    //  wrapped in setTimeout to delay binding until previous rendering has completed\n    if (typeof fn === 'function') setTimeout(fn, 0);\n  }\n\n\n  //  A11Y\n  function _addA11y (container) {\n    let modal = _q(modalSelector, container)[0];\n    let role = isAlert ? 'alertdialog' : 'dialog';\n    //  add relevant roles and properties\n    container.setAttribute('aria-hidden', true);\n    modal.setAttribute('role', role);\n  }\n  function _removeA11y (container) {\n    let modal = _q(modalSelector, container)[0];\n    //  add relevant roles and properties\n    container.removeAttribute('aria-hidden');\n    modal.removeAttribute('role');\n  }\n\n\n  //  ACTIONS\n  function _showModal (container, modal) {\n    //  show container and focus the modal\n    container.setAttribute('aria-hidden', false);\n    modal.setAttribute('tabindex', -1);\n    //  set first/last focusable elements\n    focusableElements = _q(focusableSelectors.join(), modal);\n    //  focus first element if exists, otherwise focus modal element\n    if (focusableElements.length) focusableElements[0].focus();\n    else modal.focus();\n    //  update bound events\n    _defer(_bindDocKey);\n    _defer(_bindClosePointer);\n    //  if contents are not interactive, bind click off\n    if (!isAlert) _defer(_bindContainerPointer);\n    //  reset scroll\n    modal.scrollTop = 0;\n    //  update style hook\n    container.classList.add(activeClass);\n  }\n  function _hideModal (modal, returnfocus = true) {\n    //  get container element\n    let container = modal.parentElement;\n    //  show container and focus the modal\n    container.setAttribute('aria-hidden', true);\n    modal.removeAttribute('tabindex');\n    //  update bound events\n    _unbindDocKey();\n    _unbindClosePointer();\n    //  if contents are not interactive, unbind click off\n    if (!isAlert) _unbindContainerPointer();\n    //  update style hook\n    container.classList.remove(activeClass);\n    //  return focus to button that opened the modal and reset the reference\n    if (returnfocus) {\n      currButtonOpen.focus();\n      currButtonOpen = null;\n    }\n  }\n  function _handleTabEvent (e) {\n    //  get the index of the current active element within the modal\n    let focusedIndex = focusableElements.indexOf(doc.activeElement);\n    //  handle TAB event if need to skip\n    //  if first element is focused and shiftkey is in use\n    if (e.shiftKey && (focusedIndex === 0 || focusedIndex === -1)) {\n      //  focus last item within modal\n      focusableElements[focusableElements.length - 1].focus();\n      e.preventDefault();\n    //  if last element is focused and shiftkey is not in use\n    } else if (!e.shiftKey && focusedIndex === focusableElements.length - 1) {\n      //  focus first item within modal\n      focusableElements[0].focus();\n      e.preventDefault();\n    }\n  }\n\n\n  //  EVENTS\n  function _eventOpenPointer (e) {\n    //  get related elements\n    let button = e.currentTarget;\n    let container = doc.getElementById(button.getAttribute('aria-controls'));\n    let modal = _q(modalSelector, container)[0];\n    //  save element references\n    currButtonOpen = button;\n    currModal = modal;\n    //  show modal\n    _showModal(container, modal);\n  }\n  function _eventClosePointer () {\n    _hideModal(currModal);\n  }\n  function _eventContainerPointer (e) {\n    let container = currModal.parentElement;\n    //  check if target is modal container (but not modal)\n    if (e.target === container) _hideModal(currModal);\n  }\n  function _eventDocKey (e) {\n    //  ESC key\n    if (e.keyCode === 27) _hideModal(currModal);\n    //  TAB key\n    if (e.keyCode === 9) _handleTabEvent(e);\n  }\n\n\n  //  BIND EVENTS\n  function _bindOpenPointers (container) {\n    let id = container.getAttribute('id');\n    let buttons = _q(`${openSelector}[aria-controls=\"${id}\"]`);\n    buttons.forEach(button => button.addEventListener('click', _eventOpenPointer));\n  }\n  function _bindClosePointer (modal = currModal) {\n    let button = _q(closeSelector, modal)[0];\n    button.addEventListener('click', _eventClosePointer);\n  }\n  function _bindContainerPointer (modal = currModal) {\n    let container = modal.parentElement;\n    container.addEventListener('click', _eventContainerPointer);\n  }\n  function _bindDocKey () {\n    doc.addEventListener('keydown', _eventDocKey);\n  }\n\n\n  //  UNBIND EVENTS\n  function _unbindOpenPointers (container) {\n    let id = container.getAttribute('id');\n    let buttons = doc.querySelectorAll(`${openSelector}[aria-controls=\"${id}\"]`);\n    buttons.forEach(button => button.removeEventListener('click', _eventOpenPointer));\n  }\n  function _unbindClosePointer (modal = currModal) {\n    let button = _q(closeSelector, modal)[0];\n    button.removeEventListener('click', _eventClosePointer);\n  }\n  function _unbindContainerPointer () {\n    let container = currModal.parentElement;\n    container.removeEventListener('click', _eventContainerPointer);\n  }\n  function _unbindDocKey () {\n    doc.removeEventListener('keydown', _eventDocKey);\n  }\n\n\n  //  DESTROY\n  function destroy () {\n    //  loop through available modals\n    containers.forEach(container => {\n      let modal = _q(modalSelector, container)[0];\n      modal.removeAttribute('tabindex');\n      _removeA11y(container);\n      _unbindOpenPointers(container);\n      _unbindClosePointer(modal);\n      _unbindContainerPointer(modal);\n      //  remove ready, active style hooks\n      container.classList.remove(readyClass, activeClass);\n    });\n    _unbindDocKey();\n  }\n\n\n  //  INIT\n  function init () {\n    //  cancel if no modals found\n    if (!containers.length) return;\n    //  loop through available modals\n    containers.forEach(container => {\n      _addA11y(container);\n      _bindOpenPointers(container);\n      // set ready style hook\n      container.classList.add(readyClass);\n    });\n  }\n  init();\n\n\n  // REVEAL API\n  return {\n    init,\n    destroy\n  }\n\n}\n\nvar toArray = function (items) {\n  return Array.prototype.slice.call(items);\n};\n\n/* Adapted from source: https://github.com/jonathantneal/document-promises/blob/master/document-promises.es6 */\nvar doc = {};\ndoc.loaded = new Promise(function (resolve) {\n  var listener = function () {\n    if (document.readyState === 'complete') {\n      document.removeEventListener('readystatechange', listener);\n      resolve();\n    }\n  };\n  document.addEventListener('readystatechange', listener);\n  listener();\n});\ndoc.parsed = new Promise(function (resolve) {\n  var listener = function () {\n    if (document.readyState === 'interactive' || document.readyState === 'complete') {\n      document.removeEventListener('readystatechange', listener);\n      resolve();\n    }\n  };\n  document.addEventListener('readystatechange', listener);\n  listener();\n});\ndoc.contentLoaded = new Promise(function (resolve) {\n  var listener = function () {\n    if (document.readyState === 'interactive' || document.readyState === 'complete') {\n      document.removeEventListener('DOMContentLoaded', listener);\n      resolve();\n    }\n  };\n  document.addEventListener('DOMContentLoaded', listener);\n  listener();\n});\n\nvar webvrAgentHost = {\n  originHost: SITE_ORIGIN,\n  steam: {\n    username: null,\n    password: null,\n    authenticated: false,\n    friends: [],\n    matches: []\n  },\n  state: {\n    displays: [],\n    displaysById: {},\n    displaysConnected: [],\n    displaysConnectedBySlug: {},\n    displaysPresenting: [],\n    displaysPresentingBySlug: {}\n  },\n  keys: {\n    esc: 27,\n    i: 73,\n    c: 67,\n    f: 70,\n    v: 86\n  },\n  headsetsPresentTimeout: 10000  // Timeout for showing VR status `<iframe>` (time in milliseconds [default: 10 seconds]).\n};\nwindow.webvrAgentHost = webvrAgentHost;\nwebvrAgentHost.updateState = function (displayId, displayState) {\n  displayId = String(displayId);\n  displayState = displayState || {};\n  var display = webvrAgentHost.state.displaysById[displayId];\n  var newDisplayState = Object.assign({}, display, displayState);\n  var otherDisplayState = {};\n  if (display) {\n    webvrAgentHost.state.displays[display._idx] = newDisplayState;\n    webvrAgentHost.state.displaysById[displayId] = newDisplayState;\n  } else {\n    newDisplayState._idx = webvrAgentHost.state.displays.push(newDisplayState);\n    webvrAgentHost.state.displaysById[displayId] = newDisplayState;\n  }\n  webvrAgentHost.state.displaysConnected = [];\n  webvrAgentHost.state.displaysConnectedBySlug = {};\n  webvrAgentHost.state.displaysPresenting = [];\n  webvrAgentHost.state.displaysPresentingBySlug = {};\n  Object.keys(webvrAgentHost.state.displays).forEach(function (otherDisplayId) {\n    otherDisplayState = webvrAgentHost.state.displays[otherDisplayId];\n    if (otherDisplayState.isConnected) {\n      webvrAgentHost.state.displaysConnected.push(otherDisplayState);\n      if (webvrAgentHost.state.displaysConnectedBySlug[otherDisplayState.displaySlug]) {\n        webvrAgentHost.state.displaysConnectedBySlug[otherDisplayState.displaySlug].push(otherDisplayState);\n      } else {\n        webvrAgentHost.state.displaysConnectedBySlug[otherDisplayState.displaySlug] = [otherDisplayState];\n      }\n    }\n    if (otherDisplayState.isPresenting) {\n      webvrAgentHost.state.displaysPresenting.push(otherDisplayState);\n      if (webvrAgentHost.state.displaysPresentingBySlug[otherDisplayState.displaySlug]) {\n        webvrAgentHost.state.displaysPresentingBySlug[otherDisplayState.displaySlug].push(otherDisplayState);\n      } else {\n        webvrAgentHost.state.displaysPresentingBySlug[otherDisplayState.displaySlug] = [otherDisplayState];\n      }\n    }\n  });\n  return webvrAgentHost.state;\n};\nwebvrAgentHost.state.displayIsConnected = function (headsetSlug) {\n  return !!(webvrAgentHost.state.displaysConnectedBySlug[headsetSlug] &&\n            webvrAgentHost.state.displaysConnectedBySlug[headsetSlug].length);\n};\nwebvrAgentHost.state.displayIsPresenting = function (headsetSlug) {\n  return !!(webvrAgentHost.state.displaysPresentingBySlug[headsetSlug] &&\n            webvrAgentHost.state.displaysPresentingBySlug[headsetSlug].length);\n};\nwebvrAgentHost.getDisplayId = function (display) {\n  if (display) {\n    if ('displayId' in display) {\n      return String(display.displayId);\n    }\n    if ('id' in display) {\n      return String(display.id);\n    }\n  }\n  return null;\n};\nwebvrAgentHost.getDisplayName = function (display) {\n  if (display) {\n    if ('displayName' in display) {\n      return display.displayName;\n    }\n    if ('name' in display) {\n      return display.name;\n    }\n  }\n  return null;\n};\nwebvrAgentHost.postMessage = function (msg, origin) {\n  var self = this;\n  if (typeof msg !== 'object') {\n    throw new Error('`msg` must be an object for calls to `WebvrAgent#postMessage`');\n  }\n  if (window.parent === window) {\n    // Not in an `<iframe>`.\n    return Promise.reject(new Error('Message-proxy iframe not found'));\n  }\n  Object.assign(msg, {src: 'webvr-agent'});\n  window.top.postMessage(msg, origin || self.originHost);\n};\n\nvar url = function (key, params) {\n  params = params || {};\n  if (key === 'manifest') {\n    if (params.url) {\n      return ORIGIN + '/manifest?url=' + params.url;\n    }\n  }\n  return ORIGIN;\n};\n\nif (IS_PROD && 'serviceWorker' in navigator) {\n  // Check if the application is installed by checking the controller.\n  // If there is a Service Worker controlling this page, then let's\n  // assume the application is installed.\n  navigator.serviceWorker.getRegistration().then(function (registration) {\n    if (!registration || !registration.active) {\n      return;\n    }\n    console.log('[webvr-agent][host] Service Worker already active');\n    swLoad();\n  });\n\n  // During installation, once the Service Worker is active, we show\n  // the image dynamic loader.\n  navigator.serviceWorker.addEventListener('controllerchange', function () {\n    this.controller.addEventListener('statechange', function () {\n      if (this.state !== 'activated') {\n        return;\n      }\n      swLoad();\n    });\n    if (!navigator.serviceWorker.controller) {\n      return;\n    }\n    console.log('[webvr-agent][host] Service Worker installed');\n    swLoad();\n  });\n  navigator.serviceWorker.register('service-worker.js');\n}\n\nfunction swLoad () {\n  console.log('[webvr-agent][host] Service Worker loaded');\n}\n\nfunction xhrJSON (opts) {\n  if (typeof opts === 'string') {\n    opts = {url: opts};\n  }\n  opts = opts || {};\n  opts.method = opts.method || 'get';\n  if (typeof opts.data === 'object') {\n    opts.data = JSON.stringify(opts.data);\n  }\n  return new Promise(function (resolve, reject) {\n    var xhr = new XMLHttpRequest();\n    xhr.open(opts.method, opts.url, 'true');\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    xhr.addEventListener('load', function () {\n      var data = {};\n      try {\n        // NOTE: Not parsing as JSON using `XMLHttpRequest#responseType` because of incomplete browser support.\n        data = JSON.parse(xhr.responseText || '{}');\n      } catch (e) {\n      }\n      resolve(data);\n    });\n    xhr.addEventListener('error', reject);\n    xhr.send(opts.data);\n  });\n}\n\nfunction removeHash () {\n  window.history.replaceState({}, document.title, window.location.pathname +\n    window.location.search);\n}\n\nfunction sendDisplayRequestPresentMsg (opts) {\n  if (window.parent === window) {\n    return;\n  }\n  opts = opts || {};\n  webvrAgentHost.postMessage({\n    action: 'display-request-present',\n    displaySlug: opts.displaySlug,\n    displayId: opts.displayId,\n    displayName: opts.displayName\n  });\n}\n\nfunction sendDisplayExitPresentMsg (opts) {\n  if (window.parent === window) {\n    return;\n  }\n  opts = opts || {};\n  webvrAgentHost.postMessage({\n    action: 'display-exit-present',\n    displaySlug: opts.displaySlug,\n    displayId: opts.displayId,\n    displayName: opts.displayName\n  }, ORIGIN);\n}\n\nfunction getSiblings (el, sel) {\n  var parentEl = el.parentNode;\n  if (!parentEl) {\n    return [];\n  }\n  sel = sel || '*';\n  var siblings = toArray(parentEl.querySelectorAll(sel));\n  return Array.prototype.filter.call(siblings, function (el) {\n    if (el.parentNode !== parentEl) {\n      return;\n    }\n    if (!sel || (el.matches && el.matches(sel))) {\n      return el;\n    }\n  });\n}\n\nfunction getBoundingClientRectObject (el) {\n  if (!el) {\n    return {};\n  }\n\n  var rect;\n  try {\n    rect = el.getBoundingClientRect();\n  } catch (err) {\n    return {};\n  }\n\n  var obj = {};\n  BOUNDING_CLIENT_RECT_KEYS.forEach(function (key) {\n    if (typeof rect[key] === 'number') {\n      obj[key] = Math.ceil(rect[key]) + 'px';\n    } else {\n      obj[key] = rect[key];\n    }\n  });\n  return obj;\n}\n\ndoc.loaded.then(function () {\n  var html = document.documentElement;\n  var supportsTouch = 'ontouchstart' in window;\n  var hash = window.location.hash;\n  var hashKey = 'data-aria-expanded__' + hashId;\n  // var steamModal = Frdialogmodal();\n  var toggleCloseEl;\n  var toggleInfoEl;\n  var webvrAgentEl = document.querySelector('#webvr-agent');\n  var webvrAgentHeadsetsEl = webvrAgentEl.querySelector('#webvr-agent-headsets');\n\n  var getHeight = function () {\n    return html.getClientRects()[0].height;\n  };\n\n  var getToggleVRButtonDimensions = function () {\n    return getBoundingClientRectObject(toggleVRButtonEl);\n  };\n\n  var hashId = hash.substr(1);\n\n  var defaultHeight = getHeight() + 10;\n  var expandedHeight = 160;\n  var lastSentHeight = null;\n\n  var toggleVRButtonEl = webvrAgentEl.querySelector('#webvr-agent-headsets-controls');\n  var defaultToggleVRButtonDimensions = getToggleVRButtonDimensions();\n  var lastSentToggleVRButtonDimensions = null;\n\n  html.dataset.supportsTouch = supportsTouch;\n\n  window.addEventListener('resize', function () {\n    sendResizeIframeMsg();\n    sendResizeToggleVRButtonMsg();\n  });\n\n  // steamModal.init();\n\n  window.addEventListener('beforeunload', function () {\n    // steamModal.destroy();\n  });\n\n  sendResizeIframeMsg(defaultHeight);\n\n  sendResizeToggleVRButtonMsg(defaultToggleVRButtonDimensions);\n\n  function sendResizeIframeMsg (height, origin) {\n    if (window.parent === window) {\n      return;\n    }\n    if (typeof height === 'undefined') {\n      height = getHeight();\n    }\n    if (height === lastSentHeight) {\n      return;\n    }\n    webvrAgentHost.postMessage({\n      action: 'resize-iframe',\n      height: height + 'px'\n    }, SITE_ORIGIN);\n    lastSentHeight = height;\n    return height;\n  }\n\n  function sendResizeToggleVRButtonMsg (dimensions, origin) {\n    if (window.parent === window) {\n      return;\n    }\n    if (typeof dimensions === 'undefined') {\n      dimensions = getToggleVRButtonDimensions();\n    }\n    if (dimensions === lastSentToggleVRButtonDimensions) {\n      return;\n    }\n    webvrAgentHost.postMessage({\n      action: 'resize-toggle-vr-button',\n      dimensions: dimensions\n    }, origin || SITE_ORIGIN);\n    lastSentToggleVRButtonDimensions = dimensions;\n    return dimensions;\n  }\n\n  sendResizeToggleVRButtonMsg();\n\n  function handleExpanders (evt, hash) {\n    hash = hash || window.location.hash;\n    if (!hash) {\n      return;\n    }\n    hashId = hash.substr(1);\n    hashKey = 'data-aria-expanded__' + hashId;\n    toggleCloseEl = toggleInfoEl = null;\n    var el = document.querySelector(hash);\n    var ariaExpandedState = html.getAttribute(hashKey) || null;\n    if (!el ||\n        (el.matches && el.matches(':empty')) ||\n        !document.querySelector('[aria-expands=\"' + hashId + '\"]')) {\n      return;\n    }\n    ariaExpandedState = (el.getAttribute('aria-expanded') || '').trim().toLowerCase();\n    ariaExpandedState = ariaExpandedState === 'true' ? true : false;\n    if (ariaExpandedState !== null) {\n      if (evt) {\n        evt.preventDefault();\n      }\n      ariaExpandedState = !ariaExpandedState;\n      html.setAttribute(hashKey, ariaExpandedState);\n      el.setAttribute('aria-expanded', ariaExpandedState);\n      toggleCloseEl = getSiblings(el, '[aria-roledescription=\"close\"]')[0];\n      toggleInfoEl = getSiblings(el, '[aria-roledescription=\"info\"]')[0];\n      if (toggleCloseEl && toggleInfoEl) {\n        if (ariaExpandedState) {\n          toggleCloseEl.setAttribute('aria-expanded', true);\n          toggleInfoEl.setAttribute('aria-expanded', false);\n          sendResizeIframeMsg(expandedHeight);\n        } else {\n          toggleCloseEl.setAttribute('aria-expanded', false);\n          toggleInfoEl.setAttribute('aria-expanded', true);\n          sendResizeIframeMsg(defaultHeight);\n        }\n        setTimeout(function () {\n          sendResizeIframeMsg();\n        }, 500);\n      }\n      removeHash();\n    }\n  }\n\n  window.addEventListener('hashchange', handleExpanders);\n  handleExpanders();\n\n  xhrJSON(url('manifest', {url: SITE_URL})).then(function (manifest) {\n    if (!manifest || !manifest.name) {\n      return;\n    }\n\n    webvrAgentEl.classList.remove('loading');\n\n    var image = webvrAgentEl.querySelector('.webvr-agent-image[data-setAttribute-href]');\n    var imageStyleBackgroundImage = image.getAttribute('data-style-backgroundImage');\n    var imageStyleBackgroundImageObject = manifest[imageStyleBackgroundImage];\n    if (imageStyleBackgroundImageObject) {\n      var imageStyleBackgroundImageValue = manifest[imageStyleBackgroundImage].src;\n      image.style.backgroundImage = `url(${imageStyleBackgroundImageValue})`;\n    }\n\n    var imageHrefKey = image.getAttribute('data-setAttribute-href');\n    var imageHrefValue = manifest[imageHrefKey];\n    if (imageHrefValue) {\n      image.setAttribute('href', imageHrefValue);\n    }\n\n    var name = webvrAgentEl.querySelector('.webvr-agent-name[data-textContent]');\n    var nameTextContentKey = name.getAttribute('data-textContent');\n    var nameValue = manifest[nameTextContentKey];\n    if (nameValue) {\n      name.textContent = nameValue;\n    }\n\n    var description = webvrAgentEl.querySelector('.webvr-agent-description[data-textContent]');\n    var descriptionTextContentKey = description.getAttribute('data-textContent');\n    var descriptionValue = manifest[descriptionTextContentKey];\n    if (descriptionValue) {\n      description.insertAdjacentText('afterbegin', descriptionValue);\n    } else {\n      webvrAgentEl.querySelector('[aria-expands=\"webvr-agent-description\"]').removeAttribute('aria-expands');\n    }\n\n    webvrAgentHost.postMessage({\n      action: 'loaded',\n      url: window.location.href\n    });\n  });\n\n  window.addEventListener('keyup', function (evt) {\n    if (evt.target !== document.body || evt.shiftKey || evt.metaKey || evt.altKey || evt.ctrlKey) {\n      return;\n    }\n    if (evt.keyCode === webvrAgentHost.keys.esc) {  // `Esc` key.\n      console.log('[webvr-agent][client] `Esc` key pressed');\n      if (webvrAgentHost.state.displaysConnected) {\n        if (webvrAgentHost.state.displaysPresenting.length) {\n          sendDisplayExitPresentMsg();\n        }\n      }\n      closeInfo();\n    } else if (evt.keyCode === webvrAgentHost.keys.i) {  // `i` key.\n      evt.preventDefault();\n      console.log('[webvr-agent][client] `i` key pressed');\n      toggleInfo();\n    } else if (evt.keyCode === webvrAgentHost.keys.c) {  // `c` key.\n      evt.preventDefault();\n      console.log('[webvr-agent][client] `c` key pressed');\n      closeInfo();\n    } else if (evt.keyCode === webvrAgentHost.keys.v) {\n      evt.preventDefault();\n      console.log('[webvr-agent][client] `v` key pressed');\n      if (webvrAgentHost.state.displaysConnected) {\n        if (webvrAgentHost.state.displaysPresenting.length) {\n          sendDisplayExitPresentMsg();\n        } else {\n          sendDisplayRequestPresentMsg();\n        }\n      }\n    } else if (evt.keyCode === webvrAgentHost.keys.f) {\n      evt.preventDefault();\n      console.log('[webvr-agent][client] `f` key pressed');\n      if (webvrAgentHost.state.displaysConnected) {\n        if (webvrAgentHost.state.displaysPresenting.length) {\n          sendDisplayExitPresentMsg();\n        } else {\n          sendDisplayRequestPresentMsg();\n        }\n      }\n    }\n  });\n\n  var headsetsControlsEl = webvrAgentEl.querySelector('#webvr-agent-headsets-controls');\n  if (headsetsControlsEl) {\n    ariaListbox(headsetsControlsEl, {\n      nextKeys: [\n        's',\n        'd',\n        37,\n        38\n      ],\n      prevKeys: [\n        'a',\n        'w',\n        39,\n        40\n      ]\n    });\n  }\n\n  document.body.addEventListener('click', function (evt) {\n    var el = evt.target;\n\n    if (!el || !el.closest) {\n      return;\n    }\n\n    if (el.closest('#webvr-agent-details') ||\n        el.closest('#webvr-agent-description')) {\n      var ariaExpandsEls = webvrAgentEl.querySelectorAll('[aria-expands]');\n      Array.prototype.forEach.call(ariaExpandsEls, function (el) {\n        handleExpanders(evt, '#' + el.getAttribute('aria-expands'));\n      });\n    } else {\n      var closedInfo = closeInfo();\n      if (closedInfo) {\n        return;\n      }\n    }\n\n    if (el.closest('[data-headset-slug]')) {\n      var displayId = el.closest('[data-headset-slug]').getAttribute('data-headset-id');\n      var display = webvrAgentHost.state.displaysById[displayId];\n      var displayOpts = {\n        displaySlug: el.getAttribute('data-headset-slug'),\n        displayName: el.getAttribute('data-headset-name'),\n        displayId: displayId,\n        isConnected: display && 'isConnected' in display ? display.isConnected : false,\n        isPresenting: display && 'isPresenting' in display ? display.isPresenting : false\n      };\n      if (displayOpts.isPresenting) {\n        sendDisplayExitPresentMsg(displayOpts);\n      } else if (displayOpts.isConnected) {\n        sendDisplayRequestPresentMsg(displayOpts);\n      }\n      return;\n    }\n\n    if (el.closest('#webvr-agent-steam-link')) {\n      evt.preventDefault();\n      el.blur();\n      document.documentElement.focus();\n      // TODO: Authenticate against REST API (`/steam/auth`).\n    }\n  });\n\n  var steamForm = document.querySelector('#webvr-agent-form-steam');\n  steamForm.addEventListener('submit', function (evt) {\n    evt.stopPropagation();\n    evt.preventDefault();\n    webvrAgentHost.steam.username = steamForm.querySelector('input[name=\"steam_username\"]').value;\n    // webvrAgentHost.steam.password = steamForm.querySelector('input[name=\"steam_password\"]').value;\n    document.querySelector('.webvr-agent-steam-label').textContent = 'Signed in as cvanw';\n    console.log(webvrAgentHost.steam);\n    webvrAgentHost.postMessage({\n      action: 'steam-user-authenticated',\n      username: webvrAgentHost.steam.username,\n      src: 'webvr-agent'\n    }, SITE_ORIGIN);\n    if (document.activeElement) {\n      document.activeElement.blur();\n    }\n    document.body.focus();\n  });\n\n  function closeInfo () {\n    var closeEl = document.querySelector('#webvr-agent-details-toggle-close[aria-expanded=\"true\"]');\n    if (closeEl) {\n      console.log('[webvr-agent][client] Hiding description');\n      closeEl.click();\n      return true;\n    }\n    return false;\n  }\n\n  function openInfo () {\n    var openEl = document.querySelector('#webvr-agent-details-toggle-info[aria-expanded=\"true\"]');\n    if (openEl) {\n      console.log('[webvr-agent][client] Opening description');\n      openEl.click();\n      return true;\n    }\n    return false;\n  }\n\n  function toggleInfo () {\n    console.log('[webvr-agent][client] Toggling description');\n    var toggleEl = document.querySelector('.webvr-agent-details-toggle[aria-expanded=\"true\"]');\n    if (toggleEl) {\n      toggleEl.click();\n      return true;\n    }\n    return false;\n  }\n\n  var headsetsPresentEl = webvrAgentEl.querySelector('#webvr-agent-headsets-present');\n\n  function updateHeadsets (connectedDisplayIfAvailable, retry) {\n    if (typeof retry === 'undefined') {\n      retry = true;\n    }\n\n    var headsetEls = webvrAgentEl.querySelectorAll('[data-headset-slug]');\n\n    Array.prototype.forEach.call(headsetEls, function (el) {\n      var headsetSlug = el.getAttribute('data-headset-slug');\n      var headsetLabelEnterVREl = el.querySelector('.webvr-agent-headset-label-enter-vr');\n      var headsetLabelExitVREl = el.querySelector('.webvr-agent-headset-label-exit-vr');\n      var displayIsConnected = webvrAgentHost.state.displayIsConnected(headsetSlug);\n      var displayIsPresenting = webvrAgentHost.state.displayIsPresenting(headsetSlug);\n      if (connectedDisplayIfAvailable && connectedDisplayIfAvailable.displaySlug === headsetSlug) {\n        el.setAttribute('data-headset-id', connectedDisplayIfAvailable.displayId);\n        el.setAttribute('data-headset-name', connectedDisplayIfAvailable.displayName);\n        el.setAttribute('title', connectedDisplayIfAvailable.displayName);\n      }\n      el.setAttribute('data-headset-connected', displayIsConnected);\n      el.setAttribute('data-headset-presenting', displayIsPresenting);\n      el.setAttribute('data-headset-ready', displayIsConnected && !displayIsPresenting);\n      el.setAttribute('data-headset-timeout', displayIsConnected);\n      el.setAttribute('aria-hidden', displayIsConnected || displayIsPresenting ? 'false' : 'true');\n      if (headsetLabelEnterVREl) {\n        headsetLabelEnterVREl.setAttribute('aria-hidden', displayIsPresenting ? 'true' : 'false');\n      }\n      if (headsetLabelExitVREl) {\n        headsetLabelExitVREl.setAttribute('aria-hidden', displayIsPresenting ? 'false' : 'true');\n      }\n    });\n\n    var anyDisplaysConnected = webvrAgentHost.state.displaysConnected.length > 0;\n    var anyDisplaysPresenting = webvrAgentHost.state.displaysPresenting.length > 0;\n\n    var jsonDisplaysConnected = JSON.stringify(webvrAgentHost.state.displaysConnected);\n\n    if (anyDisplaysConnected) {\n      html.setAttribute('data-connected-displays', jsonDisplaysConnected);\n      html.setAttribute('data-missing-displays', 'false');\n      html.setAttribute('data-timeout-displays', 'false');\n    } else {\n      html.removeAttribute('data-connected-displays');\n      headsetsPresentEl.innerHTML = 'Detecting VR headset&hellip;';\n    }\n\n    if (anyDisplaysPresenting) {\n      var jsonDisplaysPresenting = JSON.stringify(webvrAgentHost.state.displaysPresenting);\n      html.setAttribute('data-presenting-displays', jsonDisplaysPresenting);\n      html.removeAttribute('data-ready-displays');\n      html.setAttribute('data-missing-displays', 'false');\n      headsetsPresentEl.innerHTML = '';\n    } else {\n      html.removeAttribute('data-presenting-displays');\n      if (anyDisplaysConnected) {\n        html.setAttribute('data-ready-displays', jsonDisplaysConnected);\n        headsetsPresentEl.innerHTML = '';\n      } else if (!retry) {\n        html.setAttribute('data-missing-displays', 'true');\n        html.removeAttribute('data-ready-displays');\n        headsetsPresentEl.innerHTML = 'No VR headset detected';\n      }\n    }\n\n    if (retry) {\n      setTimeout(function () {\n        updateHeadsets(connectedDisplayIfAvailable, false);\n      }, webvrAgentHost.headsetsPresentTimeout);\n    }\n  }\n\n  function updateDisplayConnected (displayState) {\n    webvrAgentHost.updateState(displayState.displayId, displayState);\n\n    updateHeadsets(displayState);\n  }\n\n  function updateDisplayDisconnected (displayState) {\n    webvrAgentHost.updateState(displayState.displayId, displayState);\n\n    updateHeadsets();\n  }\n\n  function updateDisplayPresentStart (displayState) {\n    webvrAgentHost.updateState(displayState.displayId, displayState);\n\n    updateHeadsets(displayState);\n  }\n\n  function updateDisplayPresentEnd (displayState) {\n    webvrAgentHost.updateState(displayState.displayId, displayState);\n\n    updateHeadsets();\n  }\n\n  window.addEventListener('message', function (evt) {\n    var data = evt.data;\n    var action = data.action;\n    var src = data.src;\n    if (src !== 'webvr-agent') {\n      return;\n    }\n    if (action === 'loaded') {\n      updateHeadsets();\n    } else if (action === 'open-info') {\n      openInfo();\n    } else if (action === 'close-info') {\n      closeInfo();\n    } else if (action === 'toggle-info') {\n      toggleInfo();\n    } else if (action === 'display-connected') {\n      updateDisplayConnected(data);\n    } else if (action === 'display-disconnected') {\n      updateDisplayDisconnected(data);\n    } else if (action === 'display-present-start') {\n      updateDisplayPresentStart(data);\n    } else if (action === 'display-present-end') {\n      updateDisplayPresentEnd(data);\n    } else if (action === 'mouseenter-toggle-vr-button') {\n      if (webvrAgentHeadsetsEl) {\n        webvrAgentHeadsetsEl.classList.add('hover');\n      }\n    } else if (action === 'mouseleave-toggle-vr-button') {\n      if (webvrAgentHeadsetsEl) {\n        webvrAgentHeadsetsEl.classList.remove('hover');\n      }\n    }\n  });\n});\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n  } else if (typeof exports === 'object' && typeof module === 'object') {\n    module.exports = factory\n  } else {\n    window.ariaListbox = factory()\n  }\n})(function() {\n\n  return function(el, opts) {\n    if (!(el instanceof HTMLElement)) {\n      throw new Error('The listbox container element must be the first parameter to AriaListbox')\n    }\n\n    function normalizeKeyOptions(keys, defaults) {\n      if (!Array.isArray(keys)) {\n        keys = keys ? [keys] : defaults\n      }\n      return keys.map(function(k) {\n        return typeof k === 'string' && !Number(k) ? k.charCodeAt(0) : Number(k)\n      })\n    }\n\n    el.setAttribute('role', 'listbox')\n    opts = opts || {}\n    opts.prevKeys = normalizeKeyOptions(opts.prevKeys, [38])\n    opts.nextKeys = normalizeKeyOptions(opts.nextKeys, [40])\n    opts.selectKeys = normalizeKeyOptions(opts.selectKeys, [13, 32])\n\n    var firstSelected = el.querySelector('[aria-selected=\"true\"]')\n    if (firstSelected) {\n      firstSelected.setAttribute('tabindex', '0')\n    } else {\n      var options = el.querySelectorAll('[role=\"option\"]:not([aria-disabled=\"true\"])')\n      if (options.length) {\n        options[0].setAttribute('tabindex', '0')\n      }\n    }\n\n    function clearTabIndexes() {\n      Array.prototype.forEach.call(el.querySelectorAll('[tabindex]'), function(n) {\n        n.removeAttribute('tabindex')\n      })\n    }\n\n    function select(child) {\n      if (child.getAttribute('aria-disabled') === 'true') return\n      var multiselect = el.getAttribute('aria-multiselect') === 'true', nextSelected\n\n      if (!multiselect) {\n        Array.prototype.forEach.call(el.querySelectorAll('[aria-selected=\"true\"]'), function(n) {\n          n.removeAttribute('aria-selected')\n        })\n      }\n\n      var evt = document.createEvent('CustomEvent')\n      evt.initEvent('selection-changed', true, true)\n\n      if (multiselect && child.getAttribute('aria-selected') === 'true') {\n        child.removeAttribute('aria-selected')\n        evt.removed = child\n      } else {\n        clearTabIndexes()\n        child.setAttribute('aria-selected', 'true')\n        child.setAttribute('tabindex', '0')\n        child.focus()\n        if (multiselect) {\n          evt.added = child\n        }\n      }\n\n      evt.selection = multiselect ? el.querySelectorAll('[aria-selected=\"true\"]') : child\n      el.dispatchEvent(evt)\n    }\n\n    function optionNode(e) {\n      var optionEl = e.target\n      while (optionEl && optionEl.getAttribute('role') !== 'option') {\n        optionEl = optionEl.parentElement\n      }\n      return optionEl\n    }\n\n    el.addEventListener('click', function(e) {\n      var optionEl = optionNode(e)\n      if (optionEl) {\n        select(optionEl)\n      }\n    })\n\n    function handleKey(optionEl, code, keys, delta) {\n      if (keys.indexOf(code) !== -1) {\n        var optionEls = el.querySelectorAll('[role=\"option\"]:not([aria-disabled=\"true\"])'),\n            idx = Array.prototype.indexOf.call(optionEls, optionEl)\n\n        var next = optionEls[idx + delta]\n        if (next) {\n          clearTabIndexes()\n          next.setAttribute('tabindex', 0)\n          next.focus()\n        }\n      }\n    }\n\n    el.addEventListener('keydown', function(e) {\n      var optionEl = optionNode(e),\n          code = e.keyCode || e.code\n\n      if (!optionEl) return\n\n      if (opts.selectKeys.indexOf(code) !== -1) {\n        select(optionEl)\n      } else if (e.target && e.target.getAttribute('role') === 'option') {\n        handleKey(optionEl, code, opts.nextKeys, 1)\n        handleKey(optionEl, code, opts.prevKeys, -1)\n      }\n    })\n  }\n\n})//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2FyaWEtbGlzdGJveC9hcmlhLWxpc3Rib3guanM/OGVmZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQSxDQUFDIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKGZhY3RvcnkpXG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5XG4gIH0gZWxzZSB7XG4gICAgd2luZG93LmFyaWFMaXN0Ym94ID0gZmFjdG9yeSgpXG4gIH1cbn0pKGZ1bmN0aW9uKCkge1xuXG4gIHJldHVybiBmdW5jdGlvbihlbCwgb3B0cykge1xuICAgIGlmICghKGVsIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBsaXN0Ym94IGNvbnRhaW5lciBlbGVtZW50IG11c3QgYmUgdGhlIGZpcnN0IHBhcmFtZXRlciB0byBBcmlhTGlzdGJveCcpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplS2V5T3B0aW9ucyhrZXlzLCBkZWZhdWx0cykge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGtleXMpKSB7XG4gICAgICAgIGtleXMgPSBrZXlzID8gW2tleXNdIDogZGVmYXVsdHNcbiAgICAgIH1cbiAgICAgIHJldHVybiBrZXlzLm1hcChmdW5jdGlvbihrKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgayA9PT0gJ3N0cmluZycgJiYgIU51bWJlcihrKSA/IGsuY2hhckNvZGVBdCgwKSA6IE51bWJlcihrKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnbGlzdGJveCcpXG4gICAgb3B0cyA9IG9wdHMgfHwge31cbiAgICBvcHRzLnByZXZLZXlzID0gbm9ybWFsaXplS2V5T3B0aW9ucyhvcHRzLnByZXZLZXlzLCBbMzhdKVxuICAgIG9wdHMubmV4dEtleXMgPSBub3JtYWxpemVLZXlPcHRpb25zKG9wdHMubmV4dEtleXMsIFs0MF0pXG4gICAgb3B0cy5zZWxlY3RLZXlzID0gbm9ybWFsaXplS2V5T3B0aW9ucyhvcHRzLnNlbGVjdEtleXMsIFsxMywgMzJdKVxuXG4gICAgdmFyIGZpcnN0U2VsZWN0ZWQgPSBlbC5xdWVyeVNlbGVjdG9yKCdbYXJpYS1zZWxlY3RlZD1cInRydWVcIl0nKVxuICAgIGlmIChmaXJzdFNlbGVjdGVkKSB7XG4gICAgICBmaXJzdFNlbGVjdGVkLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnMCcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBvcHRpb25zID0gZWwucXVlcnlTZWxlY3RvckFsbCgnW3JvbGU9XCJvcHRpb25cIl06bm90KFthcmlhLWRpc2FibGVkPVwidHJ1ZVwiXSknKVxuICAgICAgaWYgKG9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgIG9wdGlvbnNbMF0uc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICcwJylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhclRhYkluZGV4ZXMoKSB7XG4gICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1t0YWJpbmRleF0nKSwgZnVuY3Rpb24obikge1xuICAgICAgICBuLnJlbW92ZUF0dHJpYnV0ZSgndGFiaW5kZXgnKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZWxlY3QoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5nZXRBdHRyaWJ1dGUoJ2FyaWEtZGlzYWJsZWQnKSA9PT0gJ3RydWUnKSByZXR1cm5cbiAgICAgIHZhciBtdWx0aXNlbGVjdCA9IGVsLmdldEF0dHJpYnV0ZSgnYXJpYS1tdWx0aXNlbGVjdCcpID09PSAndHJ1ZScsIG5leHRTZWxlY3RlZFxuXG4gICAgICBpZiAoIW11bHRpc2VsZWN0KSB7XG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZWwucXVlcnlTZWxlY3RvckFsbCgnW2FyaWEtc2VsZWN0ZWQ9XCJ0cnVlXCJdJyksIGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICBuLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcpXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIHZhciBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKVxuICAgICAgZXZ0LmluaXRFdmVudCgnc2VsZWN0aW9uLWNoYW5nZWQnLCB0cnVlLCB0cnVlKVxuXG4gICAgICBpZiAobXVsdGlzZWxlY3QgJiYgY2hpbGQuZ2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJykgPT09ICd0cnVlJykge1xuICAgICAgICBjaGlsZC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnKVxuICAgICAgICBldnQucmVtb3ZlZCA9IGNoaWxkXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbGVhclRhYkluZGV4ZXMoKVxuICAgICAgICBjaGlsZC5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCAndHJ1ZScpXG4gICAgICAgIGNoaWxkLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnMCcpXG4gICAgICAgIGNoaWxkLmZvY3VzKClcbiAgICAgICAgaWYgKG11bHRpc2VsZWN0KSB7XG4gICAgICAgICAgZXZ0LmFkZGVkID0gY2hpbGRcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBldnQuc2VsZWN0aW9uID0gbXVsdGlzZWxlY3QgPyBlbC5xdWVyeVNlbGVjdG9yQWxsKCdbYXJpYS1zZWxlY3RlZD1cInRydWVcIl0nKSA6IGNoaWxkXG4gICAgICBlbC5kaXNwYXRjaEV2ZW50KGV2dClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvcHRpb25Ob2RlKGUpIHtcbiAgICAgIHZhciBvcHRpb25FbCA9IGUudGFyZ2V0XG4gICAgICB3aGlsZSAob3B0aW9uRWwgJiYgb3B0aW9uRWwuZ2V0QXR0cmlidXRlKCdyb2xlJykgIT09ICdvcHRpb24nKSB7XG4gICAgICAgIG9wdGlvbkVsID0gb3B0aW9uRWwucGFyZW50RWxlbWVudFxuICAgICAgfVxuICAgICAgcmV0dXJuIG9wdGlvbkVsXG4gICAgfVxuXG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgb3B0aW9uRWwgPSBvcHRpb25Ob2RlKGUpXG4gICAgICBpZiAob3B0aW9uRWwpIHtcbiAgICAgICAgc2VsZWN0KG9wdGlvbkVsKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBmdW5jdGlvbiBoYW5kbGVLZXkob3B0aW9uRWwsIGNvZGUsIGtleXMsIGRlbHRhKSB7XG4gICAgICBpZiAoa2V5cy5pbmRleE9mKGNvZGUpICE9PSAtMSkge1xuICAgICAgICB2YXIgb3B0aW9uRWxzID0gZWwucXVlcnlTZWxlY3RvckFsbCgnW3JvbGU9XCJvcHRpb25cIl06bm90KFthcmlhLWRpc2FibGVkPVwidHJ1ZVwiXSknKSxcbiAgICAgICAgICAgIGlkeCA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwob3B0aW9uRWxzLCBvcHRpb25FbClcblxuICAgICAgICB2YXIgbmV4dCA9IG9wdGlvbkVsc1tpZHggKyBkZWx0YV1cbiAgICAgICAgaWYgKG5leHQpIHtcbiAgICAgICAgICBjbGVhclRhYkluZGV4ZXMoKVxuICAgICAgICAgIG5leHQuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsIDApXG4gICAgICAgICAgbmV4dC5mb2N1cygpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIG9wdGlvbkVsID0gb3B0aW9uTm9kZShlKSxcbiAgICAgICAgICBjb2RlID0gZS5rZXlDb2RlIHx8IGUuY29kZVxuXG4gICAgICBpZiAoIW9wdGlvbkVsKSByZXR1cm5cblxuICAgICAgaWYgKG9wdHMuc2VsZWN0S2V5cy5pbmRleE9mKGNvZGUpICE9PSAtMSkge1xuICAgICAgICBzZWxlY3Qob3B0aW9uRWwpXG4gICAgICB9IGVsc2UgaWYgKGUudGFyZ2V0ICYmIGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgncm9sZScpID09PSAnb3B0aW9uJykge1xuICAgICAgICBoYW5kbGVLZXkob3B0aW9uRWwsIGNvZGUsIG9wdHMubmV4dEtleXMsIDEpXG4gICAgICAgIGhhbmRsZUtleShvcHRpb25FbCwgY29kZSwgb3B0cy5wcmV2S2V5cywgLTEpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG59KVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9hcmlhLWxpc3Rib3gvYXJpYS1saXN0Ym94LmpzXG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

eval("/* global module */\n\n/*\n\n// Sample usage:\n\nwindow.addEventListener('gamepad.buttonvaluechange', function (e) {\n  console.log('[%s]', window.performance.now().toFixed(3), e.type, '• Gamepad', e.gamepad, '• Button', e.button);\n});\n\nwindow.addEventListener('gamepad.buttondown', function (e) {\n  console.log('[%s]', window.performance.now().toFixed(3), e.type, '• Gamepad', e.gamepad, '• Button', e.button);\n});\n\nwindow.addEventListener('gamepad.buttonup', function (e) {\n  console.log('[%s]', window.performance.now().toFixed(3), e.type, '• Gamepad', e.gamepad, '• Button', e.button);\n});\n\nwindow.addEventListener('gamepad.buttondown.oculusremote.b0', function (e) {\n  console.log('[%s]', window.performance.now().toFixed(3), e.type, '• Gamepad', e.gamepad, '• Button', e.button);\n});\n\n*/\n\nvar DEFAULTS = {\n  autostart: true,\n  buttonThreshold: 0.1,\n  emitEventsOnWindow: true,\n  postMessageEventsOn: null,\n  mappings: {\n    'Oculus Remote': {\n      'b0': 'center',\n      'b1': 'back',\n      'b2': 'up',\n      'b3': 'down',\n      'b5': 'right',\n      'b4': 'left'\n    }\n  }\n};\n\nfunction slugify (str) {\n  return (str || '').toLowerCase().replace(/[^\\w]/g, '').replace(/\\(.+\\)/, '');\n}\n\nfunction formatEvent (name, detail) {\n  var event = new CustomEvent(name, {detail: detail});\n  Object.keys(detail).forEach(function (key) {\n    event[key] = detail[key];\n  });\n  return event;\n}\n\nfunction Gamepads (settings) {\n  var self = this;\n  this.supported = window.requestAnimationFrame && navigator.getGamepads;\n\n  if (typeof settings === 'string') {\n    this.settings = {select: settings};\n  } else {\n    this.settings = settings || {};\n  }\n\n  this.start = function () {\n    if (navigator.getGamepads()[0]) {\n      startLoop();\n    } else {\n      window.addEventListener('gamepadconnected', startLoop);\n    }\n  };\n\n  this.stop = function () {\n    window.removeEventListener('gamepadconnected', startLoop);\n    window.cancelAnimationFrame(this.raf);\n  };\n\n  this.DEFAULTS = DEFAULTS;\n\n  if (this.supported) {\n    this.settings.mappings = Object.assign({}, DEFAULTS.mappings, this.settings.mappings);\n    this.settings = Object.assign({}, DEFAULTS, this.settings);\n\n    this.state = {};\n    this.previousState = {};\n\n    // In Firefox Nightly and Chromium builds, you must first query the VR\n    // devices for Gamepads to be exposed.\n    if (navigator.vr && navigator.vr.getDisplays) {\n      navigator.vr.getDisplays()\n        .then(function () {})\n        .catch(console.error.bind(console));\n    }\n    if (navigator.getVRDisplays) {\n      navigator.getVRDisplays()\n        .then(function () {})\n        .catch(console.error.bind(console));\n    }\n\n    if (this.settings.autostart) {\n      this.start();\n    }\n  }\n\n  function loop () {\n    self.poll();\n    self.raf = window.requestAnimationFrame(loop);\n  }\n\n  function startLoop () {\n    self.raf = window.requestAnimationFrame(loop);\n    window.removeEventListener('gamepadconnected', startLoop);\n  }\n}\n\nGamepads.prototype.poll = function () {\n  var self = this;\n  if (!this.supported) { return; }\n  this.gamepads = navigator.getGamepads();\n  var gp;\n  var btn;\n  var btnState;\n  var len;\n  var previousBtnState;\n\n  for (var i = 0; i < navigator.getGamepads().length; ++i) {\n    gp = navigator.getGamepads()[i];\n    if (!gp) { continue; }\n    if (this.select && this.select !== gp.id) { continue; }\n    this.state[gp.id] = {};\n    if (!this.previousState[gp.id]) {\n      this.previousState[gp.id] = {};\n    }\n    if (gp.buttons) {\n      len = gp.buttons.length;\n      for (var j = 0; j < len; ++j) {\n        btn = gp.buttons[j];\n\n        previousBtnState = this.previousState[gp.id]['b' + j] = this.previousState[gp.id]['b' + j] || {\n          gamepad: {\n            index: i,\n            id: gp.id\n          },\n          button: {\n            index: j,\n            value: 0,\n            pressed: false,\n            name: this.buttonName(gp, j),\n            count: 0\n          }\n        };\n\n        btnState = this.state[gp.id]['b' + j] = {\n          gamepad: {\n            index: gp.index,\n            id: gp.id\n          },\n          button: {\n            index: j,\n            value: this.buttonValue(btn),\n            pressed: this.buttonPressed(btn),\n            name: this.buttonName(gp, j),\n            count: previousBtnState.button.count\n          }\n        };\n\n        if (previousBtnState.button.value !== btnState.button.value) {\n          emitEvent(['gamepad.buttonvaluechange', btnState]);\n        }\n\n        if (previousBtnState.button.pressed && btnState.button.pressed) {\n          this.state[gp.id]['b' + j].button.count++;\n          if (this.state[gp.id]['b' + j].button.count >= 50) {\n            emitEvent(['gamepad.buttonhold', btnState]);\n            this.state[gp.id]['b' + j].button.count = 0;\n          }\n        }\n\n        if (!previousBtnState.button.pressed && btnState.button.pressed) {\n          this.state[gp.id]['b' + j].button.count = 0;\n          emitEvent(['gamepad.buttondown', btnState]);\n        }\n\n        if (previousBtnState.button.pressed && !btnState.button.pressed) {\n          emitEvent(['gamepad.buttonup', btnState]);\n          this.state[gp.id]['b' + j].button.count = 0;\n        }\n      }\n    }\n  }\n\n  function emitEvent (eventToEmit) {\n    var name = eventToEmit[0];\n    var detail = Object.assign({}, eventToEmit[1]);\n\n    if (detail.button && detail.button.count) {\n      // TODO: Actually store timestamps and compare.\n      detail.button.seconds = Math.ceil(detail.button.count / 30);\n    }\n\n    // Emit `gamepad.buttondown`, for example.\n    self.emit(formatEvent(name, detail));\n\n    name += '.' + self.gamepadSlug(detail.gamepad);\n\n    // Emit `gamepad.buttondown.oculusremote`, for example.\n    self.emit(formatEvent(name, detail));\n\n    if (detail.button) {\n      // Emit `gamepad.buttondown.oculusremote.b1`, for example.\n      self.emit(formatEvent(name + '.b' + detail.button.index, detail));\n\n      if (detail.button.name) {\n        // Emit `gamepad.buttondown.oculusremote.back`, for example.\n        self.emit(formatEvent(name + '.' + detail.button.name, detail));\n      }\n    }\n  }\n\n  this.previousState = Object.assign({}, this.state);\n};\n\nGamepads.prototype.buttonValue = function (btn) {\n  if (!this.supported) { return 0; }\n  return typeof btn === 'number' ? btn : btn.value;\n};\n\nGamepads.prototype.buttonPressed = function (btn) {\n  if (!this.supported) { return false; }\n  return (typeof btn === 'number' ? btn : btn.value) > this.settings.buttonThreshold;\n};\n\nGamepads.prototype.buttonName = function (gp, btnIndex) {\n  if (!this.supported) { return; }\n  return this.settings.mappings[gp.id] && this.settings.mappings[gp.id]['b' + btnIndex];\n};\n\nGamepads.prototype.gamepadSlug = function (gp) {\n  if (!this.supported) { return ''; }\n  return slugify(gp.id);\n};\n\nGamepads.prototype.emit = function (event) {\n  if (!this.supported) { return; }\n  if (this.settings.emitEventsOnWindow) {\n    console.log('gamepad', event);\n    window.dispatchEvent(event);\n  }\n  if (this.settings.postMessageEventsOn) {\n    var el = this.settings.postMessageEventsOn;\n    if (typeof el === 'string') {\n      el = document.querySelector(this.settings.postMessageEventsOn);\n    }\n    if (el) {\n      el.postMessage({type: 'event', data: {type: event.type, detail: event}}, '*');\n    }\n  }\n};\n\n// if (typeof define === 'function' && define.amd) {\n//   define('GAMEPADS', GAMEPADS);\n// } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {\n//   module.exports = GAMEPADS;\n// } else if (window) {\n//   window.GAMEPADS = GAMEPADS;\n// }\n\n// 'use strict';\n\nfunction toArray (obj) {\n  return Array.prototype.slice.apply(obj);\n}\n\nfunction $ (selector, parent) {\n  parent = parent || document;\n  return parent.querySelector(selector);\n}\n\nfunction $$ (selector, parent) {\n  parent = parent || document;\n  return toArray(parent.querySelectorAll(selector));\n}\n\nwindow.addEventListener('keypress', function (e) {\n  if (e.keyCode === 112) {  // `P`\n    sounds.toggle();\n  }\n});\n\nfunction Sounds () {\n  var self = this;\n\n  self.muted = false;\n\n  self.toggle = function () {\n    if (self.muted) {\n      self.play();\n    } else {\n      self.stop();\n    }\n  };\n\n  self.playEl = function (el) {\n    el.components.sound.sound.autoplay = el.components.sound.sound._autoplay;\n    el.components.sound.sound.src = el.components.sound.sound._src;\n    el.components.sound.play();\n  };\n\n  self.stopEl = function (el) {\n    el.components.sound.pause();\n    el.components.sound.sound._autoplay = el.components.sound.sound._autoplay;\n    el.components.sound.sound.autoplay = false;\n    el.components.sound.sound._src = el.components.sound.sound.src;\n    el.components.sound.sound.src = '';\n  };\n\n  self.play = function () {\n    self.muted = false;\n    self.remember();\n    $$('a-scene [sound]').forEach(self.playEl);\n  };\n\n  self.stop = function () {\n    self.muted = true;\n    self.remember();\n    $$('a-scene [sound]').forEach(self.stopEl);\n  };\n\n  self.remember = function () {\n    try {\n      localStorage.audioMuted = self.muted ? 'true' : 'false';\n    } catch (e) {\n    }\n  };\n\n  self.muteOnLoad = function () {\n    try {\n      return localStorage.audioMuted === 'true';\n    } catch (e) {\n      return null;\n    }\n  };\n\n  if (self.muteOnLoad()) {\n    self.stop();\n  }\n}\n\nvar sounds = new Sounds();\n\nwindow.addEventListener('gamepad.buttonhold.oculusremote.center', function () {\n  window.location.reload();\n});\n\nwindow.addEventListener('gamepad.buttonhold.oculusremote.back', function () {\n  window.location.href = OCULUS_SETTINGS.urls.root;\n});\n\nwindow.addEventListener('gamepad.buttonhold.oculusremote.left', function () {\n  window.history.back();\n});\n\nwindow.addEventListener('gamepad.buttonhold.oculusremote.right', function () {\n  window.history.forward();\n});\n\nwindow.addEventListener('gamepad.buttondown.oculustouchleft', function (evt) {\n  console.log('gamepad oculus touch (left)', evt);\n});\n\nwindow.addEventListener('gamepad.buttondown.oculustouchright', function (evt) {\n  console.log('gamepad oculus touch (right)', evt);\n});\n\nwindow.addEventListener('gamepad.buttondown.oculusremote.center', fire('mousedown'));\nwindow.addEventListener('gamepad.buttonup.oculusremote.center', fire('mouseup'));\nwindow.addEventListener('gamepad.buttonup.oculusremote.center', fire('click'));\n\nwindow.addEventListener('gamepad.buttondown.oculusremote.center', fire('cursor-mousedown'));\nwindow.addEventListener('gamepad.buttonup.oculusremote.center', fire('cursor-mouseup'));\nwindow.addEventListener('gamepad.buttonup.oculusremote.center', fire('cursor-click'));\n\nwindow.addEventListener('gamepad.buttondown.oculusremote.up', fireKey('down', 'w'));\nwindow.addEventListener('gamepad.buttonup.oculusremote.up', fireKey('up', 'w'));\n\nwindow.addEventListener('gamepad.buttondown.oculusremote.left', fireKey('down', 'a'));\nwindow.addEventListener('gamepad.buttonup.oculusremote.left', fireKey('up', 'a'));\n\nwindow.addEventListener('gamepad.buttondown.oculusremote.right', fireKey('down', 'd'));\nwindow.addEventListener('gamepad.buttonup.oculusremote.right', fireKey('up', 'd'));\n\nwindow.addEventListener('gamepad.buttondown.oculusremote.down', fireKey('down', 's'));\nwindow.addEventListener('gamepad.buttonup.oculusremote.down', fireKey('up', 's'));\n\nfunction fireKey (keyEventNameSuffix, key) {\n  var keyUpper = key.toUpperCase();\n  return function () {\n    var e = new CustomEvent('key' + keyEventNameSuffix, {bubbles: true});\n    e.keyCode = e.key = keyUpper.charCodeAt(0);\n    document.body.dispatchEvent(e);\n  };\n}\n\nfunction fire (eventName) {\n  return function () {\n    var e = new CustomEvent(eventName, {bubbles: true});\n    var target = $('a-scene canvas') || document.body;\n    target.dispatchEvent(e);\n  };\n}\n\nvar GAMEPADS = new Gamepads(window.GAMEPADS_SETTINGS);\n\nmodule.exports = GAMEPADS;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
module.exports = __webpack_require__(2);


/***/ })
/******/ ]);